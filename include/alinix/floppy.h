/**
 * @author Ali Mirmohammad
 ** This file is part of AliNix.

**AliNix is free software: you can redistribute it and/or modify
**it under the terms of the GNU Affero General Public License as published by
**the Free Software Foundation, either version 3 of the License, or
**(at your option) any later version.

**AliNix is distributed in the hope that it will be useful,
**but WITHOUT ANY WARRANTY; without even the implied warranty of
**MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
**GNU Affero General Public License for more details.

**You should have received a copy of the GNU Affero General Public License
**along with AliNix. If not, see <https://www.gnu.org/licenses/>.
*/
/**
 * @file floppy.h
 * @abstract:
 *    - Floppy drivers implementation header file.
*/

#ifndef __ALINIX_KERNEL_FLOPPY_H
#define __ALINIX_KERNEL_FLOPPY_H

#include <alinix/types.h>

#define FLOPPY_144_SECTORS_PER_TRACK 18

static volatile byte ReceivedIRQ = false;

/**
 * @brief Floppy disk hardware register enums.
*/
enum FloppyRegisters
{
   STATUS_REGISTER_A                = 0x3F0, // read-only
   STATUS_REGISTER_B                = 0x3F1, // read-only
   DIGITAL_OUTPUT_REGISTER          = 0x3F2,
   TAPE_DRIVE_REGISTER              = 0x3F3,
   MAIN_STATUS_REGISTER             = 0x3F4, // read-only
   DATARATE_SELECT_REGISTER         = 0x3F4, // write-only
   DATA_FIFO                        = 0x3F5,
   DIGITAL_INPUT_REGISTER           = 0x3F7, // read-only
   CONFIGURATION_CONTROL_REGISTER   = 0x3F7  // write-only
};

enum FloppyCommands
{
   READ_TRACK =                 2,	// generates IRQ6
   SPECIFY =                    3,      // * set drive parameters
   SENSE_DRIVE_STATUS =         4,
   WRITE_DATA =                 5,      // * write to the disk
   READ_DATA =                  6,      // * read from the disk
   RECALIBRATE =                7,      // * seek to cylinder 0
   SENSE_INTERRUPT =            8,      // * ack IRQ6, get status of last command
   WRITE_DELETED_DATA =         9,
   READ_ID =                    10,	// generates IRQ6
   READ_DELETED_DATA =          12,
   FORMAT_TRACK =               13,     // *
   DUMPREG =                    14,
   SEEK =                       15,     // * seek both heads to cylinder X
   VERSION =                    16,	// * used during initialization, once
   SCAN_EQUAL =                 17,
   PERPENDICULAR_MODE =         18,	// * used during initialization, once, maybe
   CONFIGURE =                  19,     // * set controller parameters
   LOCK =                       20,     // * protect controller params from a reset
   VERIFY =                     22,
   SCAN_LOW_OR_EQUAL =          25,
   SCAN_HIGH_OR_EQUAL =         29
};

/**
 * @brief IRQ handler for floppy disk interrupts.
 * 
 * This function is an interrupt service routine (ISR) for handling IRQs
 * (Interrupt Requests) generated by the floppy disk controller. When an
 * IRQ is received, it sets the `ReceivedIRQ` flag to true.
 * 
 * @note This function assumes that it is properly registered as the ISR
 *       for floppy disk interrupts, and that `ReceivedIRQ` is a global
 *       variable accessible to both the ISR and other parts of the code.
 */
inline void FloppyHandler()
{
   ReceivedIRQ = true;
}

/**
 * @brief Waits for an IRQ (Interrupt Request) to be received.
 * 
 * This function sets a flag indicating that an IRQ has not been received
 * and enters a loop, waiting for the flag to be set by an interrupt handler.
 * 
 * @note This function assumes that there is an external mechanism that
 *       will set `ReceivedIRQ` to true when an IRQ is received.
 */
inline void WaitForIRQ()
{
   ReceivedIRQ = false;
   while(!ReceivedIRQ) ;
}

void ResetFloppy();

void lba_2_chs(uint32_t lba, uint16_t* cyl, uint16_t* head, uint16_t* sector);


#endif /*__ALINIX_KERNEL_FLOPPY_H*/